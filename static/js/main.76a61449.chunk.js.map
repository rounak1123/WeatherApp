{"version":3,"sources":["components/temp1.js","App.js","reportWebVitals.js","index.js"],"names":["Temp1","useState","city","setCity","search","setSearch","country","setCountry","useEffect","a","fetch","res","json","res2","cod","gettemp","sys","getcountry","console","log","className","type","value","placeholder","onChange","event","target","toUpperCase","main","temp","toFixed","feels_like","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAEaA,EAAQ,WACnB,MAAwBC,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,UAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA8BJ,mBAAS,MAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KA8BA,OA5BAC,qBAAU,YACK,uCAAG,8BAAAC,EAAA,0DACVL,EADU,gCAEMM,MAAM,qDAAD,OACgCN,EADhC,yDAFX,cAENO,EAFM,gBAKOA,EAAIC,OALX,OAOI,QAFVC,EALM,QAOHC,IAAcX,EAAQ,MAC1BA,EAAQU,GARD,2CAAH,oDAWbE,GAEIb,IACc,uCAAG,8BAAAO,EAAA,sEACCC,MAAM,0CAAD,OACqBR,EAAKc,IAAIV,UAFpC,cACXK,EADW,gBAIEA,EAAIC,OAJN,OAIXC,EAJW,OAKjBN,EAAWM,GALM,2CAAH,oDAOhBI,GAEFC,QAAQC,IAAIjB,GACZgB,QAAQC,IAAIb,KACX,CAACF,IAGF,gCACE,6CAEA,sBAAKgB,UAAU,YAAf,UACE,uBACEC,KAAK,SACLD,UAAU,MACVE,MAAOlB,EACPmB,YAAY,mBACZC,SAAU,SAACC,GACTpB,EAAUoB,EAAMC,OAAOJ,UAGzBpB,EAGA,qCACE,sBAAKkB,UAAU,eAAf,UACGhB,EAAOuB,cADV,KAC2BzB,EAAKc,IAAIV,WAEpC,sBAAKc,UAAU,eAAf,UACG,IADH,WAEWlB,EAAK0B,KAAKC,KAAKC,QAAQ,GAFlC,WAIA,sBAAKV,UAAU,eAAf,yBACelB,EAAK0B,KAAKG,WAAWD,QAAQ,GAD5C,cAVF,+C,MCvCKE,MARf,WACE,OACE,qBAAKZ,UAAU,MAAf,SACE,cAAC,EAAD,OCMSa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.76a61449.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./temp1.css\";\r\nexport const Temp1 = () => {\r\n  const [city, setCity] = useState(null);\r\n  const [search, setSearch] = useState(\"Mumbai\");\r\n  const [country, setCountry] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const gettemp = async function () {\r\n      if (search) {\r\n        const res = await fetch(\r\n          `https://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=c30bdedeeb747d8a16adecb6c7f575b1`\r\n        );\r\n        const res2 = await res.json();\r\n        // console.log(res2);\r\n        if (res2.cod == \"404\") setCity(null);\r\n        else setCity(res2);\r\n      }\r\n    };\r\n    gettemp();\r\n\r\n    if (city) {\r\n      const getcountry = async function () {\r\n        const res = await fetch(\r\n          `https://restcountries.eu/rest/v2/alpha/${city.sys.country}`\r\n        );\r\n        const res2 = await res.json();\r\n        setCountry(res2);\r\n      };\r\n      getcountry();\r\n    }\r\n    console.log(city);\r\n    console.log(country);\r\n  }, [search]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Weather App</h1>\r\n\r\n      <div className=\"container\">\r\n        <input\r\n          type=\"search\"\r\n          className=\"inp\"\r\n          value={search}\r\n          placeholder=\"Type a city name\"\r\n          onChange={(event) => {\r\n            setSearch(event.target.value);\r\n          }}\r\n        />\r\n        {!city ? (\r\n          <p>No Data</p>\r\n        ) : (\r\n          <>\r\n            <div className=\"box cityName\">\r\n              {search.toUpperCase()}, {city.sys.country}\r\n            </div>\r\n            <div className=\"box currtemp\">\r\n              {\" \"}\r\n              Actual :{city.main.temp.toFixed(0)}°C\r\n            </div>\r\n            <div className=\"box realfeel\">\r\n              Feels Like :{city.main.feels_like.toFixed(0)}°C\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { Temp1 } from \"./components/temp1\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Temp1 />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}